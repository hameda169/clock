{"version":3,"sources":["components/Clock/index.tsx","hooks/time/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RADIUS","PERIMETER_PERCENTAGE","Math","PI","sqrt","pow","calculateX","value","WIDTH","sin","calculateY","HEIGHT","cos","ClockComponent","second","minute","hour","preserveAspectRatio","className","viewBox","cx","cy","r","strokeDasharray","strokeDashoffset","x1","y1","x2","y2","now","Date","initialValueGenerator","getSeconds","getMinutes","getHours","useTime","initTime","useState","setSecond","setMinute","setHour","initRef","useRef","useEffect","current","m","h","interval","window","setInterval","s","clearInterval","App","undefined","Clock","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3ddd1fe.chunk.js","sourcesContent":["import React from 'react';\nimport './styles.css';\n\nconst RADIUS = 240;\nconst WIDTH = 500;\nconst HEIGHT = 500;\nconst PERIMETER_PERCENTAGE = 2 * Math.PI * RADIUS * 100 / Math.sqrt(\n  (Math.pow(WIDTH, 2) + Math.pow(HEIGHT, 2)) / 2\n);\n\nfunction calculateX(value: number): string {\n  return `${WIDTH/2 + RADIUS * Math.sin(value * 2 * Math.PI)}`;\n}\n\nfunction calculateY(value: number): string {\n  return `${HEIGHT/2 - RADIUS * Math.cos(value * 2 * Math.PI)}`;\n}\n\ninterface Props {\n  second: number;\n  minute: number;\n  hour: number;\n}\n\nfunction ClockComponent({second, minute, hour}: Props): React.ReactElement {\n  return <svg preserveAspectRatio='none' className='svg-class' viewBox={`0 0 ${WIDTH} ${HEIGHT}`}>\n    <circle\n      className='hour-circle'\n      cx='50%'\n      cy='50%'\n      r={RADIUS}\n      strokeDasharray={`${0.06*PERIMETER_PERCENTAGE/12}%, ${0.94*PERIMETER_PERCENTAGE/12}%`}\n      strokeDashoffset={`${0.06*PERIMETER_PERCENTAGE/12/2}%`}\n    />\n    <circle\n      className='second-circle'\n      cx='50%'\n      cy='50%'\n      r={RADIUS}\n      strokeDasharray={`${0.06*PERIMETER_PERCENTAGE/60}%, ${0.94*PERIMETER_PERCENTAGE/60}%`}\n      strokeDashoffset={`${0.06*PERIMETER_PERCENTAGE/60/2}%`}\n    />\n    <line\n      className='line hour-line'\n      x1='50%'\n      y1='50%'\n      x2={calculateX((hour + minute/60)/12)}\n      y2={calculateY((hour + minute/60)/12)}\n    />\n    <line\n      className='line minute-line'\n      x1='50%'\n      y1='50%'\n      x2={calculateX((minute + second/60)/60)}\n      y2={calculateY((minute + second/60)/60)}\n    />\n    <line\n      className='line second-line'\n      x1='50%'\n      y1='50%'\n      x2={calculateX(second/60)}\n      y2={calculateY(second/60)}\n    />\n    <circle\n      cx='50%'\n      cy='50%'\n      r='1%'\n    />\n  </svg>\n}\n\nexport default ClockComponent;\n","import {useEffect, useRef, useState} from 'react';\n\ninterface Time {\n  second: number;\n  minute: number;\n  hour: number;\n}\n\nfunction now():Date {\n  return new Date();\n}\nfunction initialValueGenerator(){\n  return ({\n    second: now().getSeconds(),\n    minute: now().getMinutes(),\n    hour: now().getHours(),\n  });\n}\n\nfunction useTime(initTime: Time = initialValueGenerator()): Time {\n  const [second, setSecond] = useState(initTime.second);\n  const [minute, setMinute] = useState(initTime.minute);\n  const [hour, setHour] = useState(initTime.hour);\n  const initRef = useRef(true);\n\n  useEffect(() => {\n    if(initRef.current) {\n      return\n    }\n    if(second === 0) {\n      setMinute(m => (m + 1) % 60);\n    }\n  }, [second]);\n\n  useEffect(() => {\n    if(initRef.current) {\n      return\n    }\n    if(minute === 0) {\n      setHour(h => (h + 1) % 24);\n    }\n  }, [minute]);\n\n  useEffect(() => {\n    initRef.current = false;\n    const interval = window.setInterval(() => {\n      setSecond(s => (s + 1) % 60);\n    }, 1000);\n\n    return () => window.clearInterval(interval);\n  }, []);\n\n  return {second, minute, hour};\n}\n\nexport default useTime;\n","import React from 'react';\nimport {Clock} from \"./components\";\nimport {useTime} from \"./hooks\";\n\nfunction App() {\n  const {second, minute, hour} = useTime(undefined);\n\n  return (\n    <div>\n      <Clock second={second} minute={minute} hour={hour} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}